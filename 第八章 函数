函数的定义：
关键字：def xxx ():
向函数传递信息：设定形参  使用时像其传递实参
传递实参时，每个实参都关联到函数定义中的一个形参，最简单的关联方式时根据位置。例：
def describe_pet (animal_type, pet_name):
  print("I have a " + animal_type + ".");
  print ("MY" + animal_type + " 's name is " + pet_type.title() + ".");
describe_pet ("hamster","harry");
python 使用缩进来表示代码逻辑。
函数可以被调用很多次，实参位置的顺序很重要
关键字实参 ： 传递给函数的名称-值 对，直接关联 无需考虑顺序。
def describe_pet (animal_type, pet_name):
  print("I have a " + animal_type + ".");
  print ("MY" + animal_type + " 's name is " + pet_type.title() + ".");
describe_pet( pet_name = "xiaoqi", animal_type = "dog");
函数的形参可以设定默认值
函数返回值 一个或一组值或字典

高阶函数
把函数作为参数传入或者返回
def add(x, y, f):
    return f(x) + f(y)
add (-4,-9,abs)  实际上等价于 abs(-4) + abs(-5);

map() 函数 
map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。

例如，对于list [1, 2, 3, 4, 5, 6, 7, 8, 9]

如果希望把list的每个元素都作平方，就可以用map()函数：
因此，我们只需要传入函数f(x)=x*x，就可以利用map()函数完成这个计算：
def f(x):
    return x*x
print map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
map()函数不改变原有的 list，而是返回一个新的 list。

利用map()函数，可以把一个 list 转换为另一个 list，只需要传入转换函数。

由于list包含的元素可以是任何类型，因此，map() 不仅仅可以处理只包含数值的 list，事实上它可以处理包含任意类型的 list，
只要传入的函数f可以处理这种数据类
型。
例子： 假设用户输入的英文名字不规范，没有按照首字母大写，后续字母小写的规则，请利用map()函数，
把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：
输入：['adam', 'LISA', 'barT']
输出：['Adam', 'Lisa', 'Bart']
code :
def format_name(s):
    return s.title();
print map(format_name, ['adam', 'LISA', 'barT'])

reduce()函数：reduce()函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数 f，一个list，
但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。
def f(x,y):
  return x + y;
reduce (f,[1,3,5,7,9) 此时 函数做如下运算：1+3= 4 ； 4+5=9 9+7=16 16+9=25；
reduce()还可以接收第3个可选参数，作为计算的初始值。如果把初始值设为100，计算  reduce(f,[1,3,5,7,9],100) 结果变为125

filter()函数 ： python中的高阶函数 传入一个函数和一个list  用这个函数对这个list 中的每一个元素进行判断 返回一个TRUE 或者 FALSE 
filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。
利用filter()，可以完成很多有用的功能，例如，删除 None 或者空字符串：
def is_not_empty(s):
    return s and len(s.strip()) > 0
filter(is_not_empty, ['test', None, '', 'str', '  ', 'END'])
结果：['test', 'str', 'END']
filter(is_not_empty, ['test', None, '', 'str', '  ', 'END'])
sort()函数
在python中sort本身就可以为list排序 其实sort也是一个高阶函数 可以传入用户自己定义的函数来作为排序条件
比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。
def reversed_cmp(x, y): ###倒序排序
    if x > y:
        return -1
    if x < y:
        return 1
    return 0
sorted([36, 5, 12, 9, 21], reversed_cmp)
    return 0
>>>[36, 21, 12, 9, 5]
python可以返回一个函数
例如，定义一个函数 f()，我们让它返回一个函数 g，可以这样写：
def f():
    print 'call f()...'
    # 定义函数g:
    def g():
        print 'call g()...'
    # 返回函数g:
    return g
		
		
>>> x = f()   # 调用f()
call f()...
>>> x   # 变量x是f()返回的函数：
<function g at 0x1037bf320>
>>> x()   # x指向函数，因此可以调用
call g()...   # 调用x()就是执行g()函数定义的代码
实际上函数也是一个对象 返回的变量可以想象成一个函数/ 要注意返回的是函数还是函数调用的值

高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便。
在Python中，对匿名函数提供了有限支持。还是以map()函数为例，计算 f(x)=x2 时，除了定义一个f(x)的函数外，还可以直接传入匿名函数：
map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])
[1, 4, 9, 16, 25, 36, 49, 64, 81]
